{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://flappy-bird/./src/engine/context.ts","webpack://flappy-bird/./src/gameObjects/Background.ts","webpack://flappy-bird/./src/engine/stateMachine.ts","webpack://flappy-bird/./src/gameObjects/Floor.ts","webpack://flappy-bird/./src/engine/index.ts","webpack://flappy-bird/./src/gameObjects/Bird.ts","webpack://flappy-bird/./src/gameObjects/Pipes.ts","webpack://flappy-bird/./src/index.ts"],"sourcesContent":["const gameScreen = document.querySelector<HTMLCanvasElement>('#gameScreen');\nconst context = gameScreen.getContext('2d');\n\nexport { gameScreen, context };","import { context, gameScreen } from \"../engine/context\";\nimport { IGameObject } from \"../engine/interfaces/IGameObject\";\n\nexport class Background implements IGameObject {\n  private x = 0;\n  private y = gameScreen.height - 227;\n  private width = 276;\n  private height = 227;\n  private sX = 0;\n  private sY = 0;\n  private spriteSheet: HTMLImageElement;\n  \n  public init(): void {\n    this.spriteSheet = new Image();\n    this.spriteSheet.src = 'assets/spritesheet.png';\n  }\n\n  public draw(): void {\n    context.drawImage(\n      this.spriteSheet,\n      this.sX,\n      this.sY,\n      this.width,\n      this.height,\n      this.x,\n      this.y,\n      this.width,\n      this.height\n    );\n\n    context.drawImage(\n      this.spriteSheet,\n      this.sX,\n      this.sY,\n      this.width,\n      this.height,\n      this.x + this.width,\n      this.y,\n      this.width,\n      this.height\n    );\n\n    context.drawImage(\n      this.spriteSheet,\n      this.sX,\n      this.sY,\n      this.width,\n      this.height,\n      this.x + this.width * 2,\n      this.y,\n      this.width,\n      this.height\n    );\n  }\n};","enum stateMachine {\n  ready,\n  start,\n  over\n};\n\nclass State {\n  public static current = stateMachine.ready;\n\n  public static setCurrent(newState: stateMachine) {\n    this.current = newState;\n  }\n}\n\nexport { stateMachine, State };","import { gameScreen, context } from '../engine/context';\nimport { IGameObject } from '../engine/interfaces/IGameObject';\nimport { stateMachine, State } from '../engine/stateMachine';\n\nexport class Floor implements IGameObject {\n  private x = 0;\n  private y = gameScreen.height - 112;\n  private sX = 276;\n  private sY = 0;\n  private width = 224;\n  private height = 112;\n  private xSpeed = 2;\n\n  private spriteSheet: HTMLImageElement;\n  \n  public get position() {\n    return {\n      x: this.x,\n      y: this.y\n    };\n  }\n\n  public init(): void {\n    this.spriteSheet = new Image();\n    this.spriteSheet.src = 'assets/spritesheet.png';\n  }\n\n  public draw(): void {\n    // Draw two floors to fill the screen\n    context.drawImage(\n      this.spriteSheet,\n      this.sX,\n      this.sY,\n      this.width,\n      this.height,\n      this.x,\n      this.y,\n      this.width,\n      this.height\n    );\n\n    context.drawImage(\n      this.spriteSheet,\n      this.sX,\n      this.sY,\n      this.width,\n      this.height,\n      this.x + this.width,\n      this.y,\n      this.width,\n      this.height\n    );\n\n    context.drawImage(\n      this.spriteSheet,\n      this.sX,\n      this.sY,\n      this.width,\n      this.height,\n      this.x + this.width * 2,\n      this.y,\n      this.width,\n      this.height\n    );\n\n    context.drawImage(\n      this.spriteSheet,\n      this.sX,\n      this.sY,\n      this.width,\n      this.height,\n      this.x + this.width * 3,\n      this.y,\n      this.width,\n      this.height\n    );\n\n    context.drawImage(\n      this.spriteSheet,\n      this.sX,\n      this.sY,\n      this.width,\n      this.height,\n      this.x + this.width * 4,\n      this.y,\n      this.width,\n      this.height\n    );\n\n    context.drawImage(\n      this.spriteSheet,\n      this.sX,\n      this.sY,\n      this.width,\n      this.height,\n      this.x + this.width * 5,\n      this.y,\n      this.width,\n      this.height\n    );\n  }\n\n  public update(): void {\n    // If the floor x mod gameScreen.width / 2 is equal to zero, then, reset the x\n    if (State.current !== stateMachine.over) {\n      this.x = (this.x - this.xSpeed) % (gameScreen.width / 2);\n    }\n  }\n};","import { context, gameScreen } from './context';\nimport { IGameObject } from './interfaces/IGameObject';\n\nexport class Engine {\n  private static gameObjects: IGameObject[] = [];\n  public static framesCount = 0;\n\n  public static createGameObjects(objects: IGameObject[]): void {\n    Engine.gameObjects.push(...objects);\n  }\n\n  public static getGameObject<T extends IGameObject>(gameObjectConstructor: T | any): T {\n    return this.gameObjects.find(\n      gameObject => gameObject instanceof gameObjectConstructor\n    ) as T;\n  }\n\n  private static draw(): void {\n    context.clearRect(0, 0, gameScreen.width, gameScreen.height);\n\n    Engine.gameObjects.forEach(gameObject => gameObject.draw && gameObject.draw());\n  }\n\n  private static update() {\n    Engine.gameObjects.forEach(gameObject => gameObject.update && gameObject.update());\n  }\n\n  private static loop() {\n    Engine.update();\n    Engine.draw();\n\n    Engine.framesCount++;\n\n    requestAnimationFrame(() => Engine.loop());\n  }\n\n  public static init() {\n    Engine.gameObjects.forEach(gameObject => gameObject.init && gameObject.init());\n\n    Engine.loop();\n  }\n};","import { Engine } from '../engine';\n\nimport { gameScreen, context } from \"../engine/context\";\nimport { IGameObject } from '../engine/interfaces/IGameObject';\nimport { stateMachine, State } from \"../engine/stateMachine\";\nimport { Floor } from './Floor';\n\nexport class Bird implements IGameObject {\n  // Position and scale Properties\n  private x: number;\n  private y: number;\n  private width = 34;\n  private height = 24;\n\n  // Physics\n  private gravity = 0.8;\n  private mass = 0.3;\n  private velocity = 0;\n  private flapImpulse = 5;\n  private angle = 0;\n  private angleSpeed = 6;\n  private angleLimit = 60;\n\n  // Animation\n  private animationSpeed = 4;\n  private sprites = [\n    { sX: 276, sY: 114, },\n    { sX: 276, sY: 140, },\n    { sX: 276, sY: 166, },\n    { sX: 276, sY: 140, },\n  ];\n\n  private spriteIndex = 0;\n\n  private spriteSheet: HTMLImageElement;\n\n  private floor: Floor;\n\n  public get position() {\n    return {\n      x: this.x,\n      y: this.y\n    };\n  }\n\n  public get scale() {\n    return {\n      width: this.width,\n      height: this.height\n    };\n  }\n  \n  public init(): void {\n    this.spriteSheet = new Image();\n    this.spriteSheet.src = 'assets/spritesheet.png';\n    this.floor = Engine.getGameObject(Floor);\n    this.y = gameScreen.height / 3;\n\n    if (window.outerWidth <= 720) {\n      this.x = 100;\n    } else {\n      this.x = gameScreen.width / 2;\n    }\n\n    gameScreen.addEventListener('click', () => {\n      switch(State.current) {\n        case stateMachine.ready: {\n          State.current = stateMachine.start;\n          \n          gameScreen.parentElement.requestFullscreen();\n          this.flap();\n          break;\n        }\n    \n        case stateMachine.start: {\n          this.flap();\n          break;\n        }\n      }\n    });\n\n    window.addEventListener('resize', () => {\n      if (window.outerWidth <= 720) {\n        this.x = 100;\n      } else {\n        this.x = gameScreen.width / 2;\n      }\n    })\n  }\n\n  public draw(): void {\n    const { sX, sY } = this.sprites[this.spriteIndex];\n\n    const angleInRadian = (Math.PI * this.angle) / 180;\n\n    context.save();\n    context.translate(this.x, this.y);\n    context.rotate(angleInRadian);\n    context.drawImage(\n      this.spriteSheet,\n      sX,\n      sY,\n      this.width,\n      this.height,\n      -this.width / 2,\n      -this.height / 2,\n      this.width,\n      this.height,\n    );\n    context.restore();\n  }\n\n  public update(): void {\n    this.checkFloorCollision();\n\n    if (this.velocity < 0) {\n      this.angle = Math.max(-this.angleLimit, this.angle - this.angleSpeed);\n    } else if (this.velocity > 0) {\n      this.angle = Math.min(this.angleLimit, this.angle + this.angleSpeed);\n    }\n\n    if (State.current !== stateMachine.over) {\n      Engine.framesCount % this.animationSpeed === 0 && this.spriteIndex++;\n\n      this.spriteIndex = this.spriteIndex % this.sprites.length;\n    }\n\n    this.y += this.velocity;\n  }\n\n  private applyGravity(): void {\n    this.velocity += this.gravity * this.mass;\n  }\n\n  private flap(): void {\n    this.velocity = -this.flapImpulse;\n  }\n\n  private checkFloorCollision(): void {\n    if (State.current !== stateMachine.ready) {\n      if ((this.y + this.height) >= this.floor.position.y) {\n        State.setCurrent(stateMachine.over);\n        this.die();\n      } else {\n        this.applyGravity();\n      }\n    }\n  }\n\n  private die(): void {\n    this.y = this.floor.position.y - (this.height / 2);\n    this.velocity = 0;\n    this.spriteIndex = 0;\n  }\n};","import { Engine } from '../engine';\nimport { context, gameScreen } from '../engine/context';\nimport { IGameObject } from '../engine/interfaces/IGameObject';\nimport { stateMachine, State } from '../engine/stateMachine';\n\nimport { Bird } from './Bird';\n\nexport class Pipes implements IGameObject {\n  // Properties in the canvas\n  private width = 52;\n  private height = 400;\n  private gap = 85;\n  private xSpeed = 2;\n  private pipesGenerationInterval = 100; // frames interval\n  private instances = [];\n  private generationOriginX = gameScreen.width;\n\n  // Animation\n  private sprites = [\n    { sX: 502, sY: 0 },\n    { sX: 554, sY: 0 },\n  ];\n\n  private spriteSheet: HTMLImageElement;\n\n  private bird: Bird;\n  \n  public init(): void {\n    this.spriteSheet = new Image();\n    this.spriteSheet.src = 'assets/spritesheet.png';\n    this.bird = Engine.getGameObject(Bird);\n\n    if (window.outerWidth <= 720) {\n      this.generationOriginX = gameScreen.width / 2;\n    }\n\n    window.addEventListener('resize', () => {\n      if (window.outerWidth <= 720) {\n        this.generationOriginX = gameScreen.width / 2;\n      } else {\n        this.generationOriginX = gameScreen.width;\n      }\n    });\n  }\n\n  public draw(): void {\n    this.instances.forEach(pipe => {\n      const pipeBottom = this.sprites[0];\n      const pipeTop = this.sprites[1];\n\n      const pipeBottomY = pipe.y + this.height + this.gap;\n\n      context.drawImage(\n        this.spriteSheet,\n        pipeTop.sX,\n        pipeTop.sY,\n        this.width,\n        this.height,\n        pipe.x,\n        pipe.y,\n        this.width,\n        this.height,\n      );\n\n      context.drawImage(\n        this.spriteSheet,\n        pipeBottom.sX,\n        pipeBottom.sY,\n        this.width,\n        this.height,\n        pipe.x,\n        pipeBottomY,\n        this.width,\n        this.height,\n      );\n    });\n  }\n\n  public update(): void {\n    if (State.current === stateMachine.start) {\n      this.generatePipes();\n    }\n\n    this.instances.forEach(pipe => {\n      if (State.current === stateMachine.start){\n        pipe.x -= this.xSpeed;\n      }\n\n      if (pipe.x < -this.width) {\n        this.instances.shift();\n      }\n\n      if (\n        (pipe.x < (this.bird.position.x + (this.bird.scale.width / 3)) &&\n        pipe.x + this.width > this.bird.position.x) &&\n        (pipe.y + this.height > this.bird.position.y - (this.bird.scale.height / 2) ||\n        pipe.y + this.height + this.gap < this.bird.position.y + (this.bird.scale.height / 2))\n      ) {\n        State.setCurrent(stateMachine.over);\n      }\n    });\n  }\n\n  private generatePipes(): void {\n    if (Engine.framesCount % this.pipesGenerationInterval === 0) {\n      this.instances.push({\n        x: this.generationOriginX,\n        y: Math.floor(Math.random() * (-125 + 325) - 325)\n      });\n    }\n  }\n};","import { Background } from './gameObjects/Background';\nimport { Floor } from './gameObjects/Floor';\nimport { Bird } from './gameObjects/Bird';\nimport { Pipes } from './gameObjects/Pipes';\n\nimport { Engine } from './engine';\n\nEngine.createGameObjects([\n  new Background,\n  new Bird,\n  new Pipes,\n  new Floor,\n]);\n\nEngine.init();"],"names":["gameScreen","document","querySelector","context","getContext","stateMachine","Background","height","this","spriteSheet","Image","src","drawImage","sX","sY","width","x","y","State","newState","current","ready","Floor","over","xSpeed","Engine","objects","gameObjects","push","gameObjectConstructor","find","gameObject","clearRect","forEach","draw","update","framesCount","requestAnimationFrame","loop","init","Bird","floor","getGameObject","window","outerWidth","addEventListener","start","parentElement","requestFullscreen","flap","sprites","spriteIndex","angleInRadian","Math","PI","angle","save","translate","rotate","restore","checkFloorCollision","velocity","max","angleLimit","angleSpeed","min","animationSpeed","length","gravity","mass","flapImpulse","position","setCurrent","die","applyGravity","Pipes","bird","generationOriginX","instances","pipe","pipeBottom","pipeTop","pipeBottomY","gap","generatePipes","shift","scale","pipesGenerationInterval","random","createGameObjects"],"sourceRoot":""}